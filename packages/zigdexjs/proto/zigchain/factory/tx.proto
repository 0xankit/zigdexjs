// this file defines the Msg service (transactions)  for the factory module
syntax = "proto3";

package zigchain.factory;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "zigchain/factory/params.proto";
import "cosmos/base/v1beta1/coin.proto";

// REPLACE_TS_CLIENT_FIX_FROM_IMPORT
import "cosmos/bank/v1beta1/bank.proto";
// REPLACE_TS_CLIENT_FIX_TO_IMPORT

option go_package = "zigchain/x/factory/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // Create token
  rpc CreateDenom (MsgCreateDenom) returns (MsgCreateDenomResponse);
  // Set the metadata of a denom
  rpc SetDenomMetadata        (MsgSetDenomMetadata       ) returns (MsgSetDenomMetadataResponse       );
  // UpdateDenomURI updates the URI of a denom and its sha256 hash, only bank admin can do it.
  rpc UpdateDenomURI          (MsgUpdateDenomURI         ) returns (MsgUpdateDenomURIResponse         );
  // UpdateDenomMaxSupply updates the max supply and options o lock max supply changes on a denom, only bank admin can do it.
  rpc UpdateDenomMaxSupply    (MsgUpdateDenomMaxSupply   ) returns (MsgUpdateDenomMaxSupplyResponse   );
  // UpdateDenomAuth updates the admins address: bank, and metadata of a denom, only bank admin can do it.
  rpc UpdateDenomAuth         (MsgUpdateDenomAuth        ) returns (MsgUpdateDenomAuthResponse        );
  // UpdateDenomMetadataAuth updates the metadata admin of a denom, needed for case when bank admin is disabled
  rpc UpdateDenomMetadataAuth (MsgUpdateDenomMetadataAuth) returns (MsgUpdateDenomMetadataAuthResponse);
  // Mint and send tokens to a recipient
  rpc MintAndSendTokens (MsgMintAndSendTokens) returns (MsgMintAndSendTokensResponse);
  // BurnTokens - Burn tokens from the signer's account, signer has to be bank admin to do it.
  rpc BurnTokens               (MsgBurnTokens              ) returns (MsgBurnTokensResponse              );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                          "authority";
  option           (amino.name) = "zigchain/x/factory/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateDenom used to create new denom via factory
message MsgCreateDenom {
  option (cosmos.msg.v1.signer) = "creator";
  string creator              = 1;
  string subDenom           = 2;
  string maxSupply = 3 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bool   canChangeMaxSupply = 4;
  
  // metadata
  string URI = 5;
  
  // sha256 hash of the JSON metadata file
  string URIHash = 6;
}

// MsgCreateDenomResponse is conformation on created denom.
message MsgCreateDenomResponse {
  string creator            = 1;
  string bankAdmin          = 2;
  string metadataAdmin      = 3;
  string denom              = 4;
  string maxSupply = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bool   canChangeMaxSupply = 6;
  string URI                = 7;
  string URIHash            = 8;
}

// MsgMintAndSendTokens mints tokens and sends them to a recipient
message MsgMintAndSendTokens {
  option (cosmos.msg.v1.signer) = "signer";
  string                   signer    = 1;
  cosmos.base.v1beta1.Coin token     = 2 [(gogoproto.nullable)   = false];
  string                   recipient = 3 ;
}

// MsgMintAndSendTokensResponse is conformation on minted and sent tokens.
message MsgMintAndSendTokensResponse {
  cosmos.base.v1beta1.Coin tokenMinted = 1;
  string                   recipient   = 2;
  cosmos.base.v1beta1.Coin newSupply   = 3;
}


// MsgUpdateDenomAuth updates the admins address: bank, and metadata of a denom
message MsgUpdateDenomAuth {
  option (cosmos.msg.v1.signer) = "signer";
  string signer        = 1;
  string denom         = 2;
  string bankAdmin     = 3;
  string metadataAdmin = 4;
}

// MsgUpdateDenomAuthResponse is conformation on updated metadata.
message MsgUpdateDenomAuthResponse {
  string denom         = 1;
  string bankAdmin     = 2;
  string metadataAdmin = 3;
}

// MsgUpdateDenomURI updates the URI of a denom and its sha256 hash
message MsgUpdateDenomURI {
  option (cosmos.msg.v1.signer) = "signer";
  string signer  = 1;
  string denom   = 2;
  string URI     = 3;
  string URIHash = 4;
}

// MsgUpdateDenomURIResponse is conformation on updated metadata.
message MsgUpdateDenomURIResponse {
  string denom   = 1;
  string URI     = 2;
  string URIHash = 3;
}

// MsgUpdateDenomMaxSupply updates the max supply and options o lock max supply changes on a denom
message MsgUpdateDenomMaxSupply {
  option (cosmos.msg.v1.signer) = "signer";
  string signer             = 1;
  string denom              = 2;
  string maxSupply = 3 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bool   canChangeMaxSupply = 4;
}

// MsgUpdateDenomMaxSupplyResponse is conformation on updated metadata.
message MsgUpdateDenomMaxSupplyResponse {
  string denom              = 1;
  string maxSupply = 2 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bool   canChangeMaxSupply = 3;
}

// MsgUpdateDenomMetadataAuth updates the metadata admin of a denom, needed for case when bank admin is disabled
message MsgUpdateDenomMetadataAuth {
  option (cosmos.msg.v1.signer) = "signer";
  string signer        = 1;
  string denom         = 2;
  string metadataAdmin = 3;
}

// MsgUpdateDenomMetadataAuthResponse is conformation on updated metadata.
message MsgUpdateDenomMetadataAuthResponse {
  string denom         = 1;
  string metadataAdmin = 2;
}

// MsgBurnTokens burns tokens from the signer's account, signer has to be bank admin to do it.
message MsgBurnTokens {
  option (cosmos.msg.v1.signer) = "signer";
  string                   signer = 1;
  cosmos.base.v1beta1.Coin token = 2 [(gogoproto.nullable) = false];
}

// MsgBurnTokensResponse is conformation on burned tokens.
message MsgBurnTokensResponse {
  cosmos.base.v1beta1.Coin amountBurned = 1 [(gogoproto.nullable) = false];
}

// REPLACE_TS_CLIENT_FIX_FROM_BODY
// MsgSetDenomMetadata sets the metadata of a token
message MsgSetDenomMetadata {
  option (cosmos.msg.v1.signer) = "signer";
  string                       signer   = 1;
  // Uncomment me for ts-client, until better solution is found
  cosmos.bank.v1beta1.Metadata metadata = 2 [(gogoproto.nullable) = false];
  //    Metadata metadata = 2 [(gogoproto.nullable) = false];
}

// MsgSetDenomMetadataResponse is conformation on updated metadata.
message MsgSetDenomMetadataResponse {
  // Uncomment me for ts-client, until better solution is found
  cosmos.bank.v1beta1.Metadata metadata = 1;
  //      Metadata metadata = 1;
}
// REPLACE_TS_CLIENT_FIX_TO_BODY