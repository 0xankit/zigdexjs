syntax = "proto3";

package zigchain.dex;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "zigchain/dex/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "zigchain/x/dex/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams    (MsgUpdateParams   ) returns (MsgUpdateParamsResponse   );
  // CreatePool create new pool from base and quote tokens
  rpc CreatePool      (MsgCreatePool     ) returns (MsgCreatePoolResponse     );
  // Swap swaps tokens from one to another
  rpc Swap            (MsgSwap           ) returns (MsgSwapResponse           );
  // AddLiquidity adds liquidity to the pool, from the base and quote tokens send in
  rpc AddLiquidity    (MsgAddLiquidity   ) returns (MsgAddLiquidityResponse   );
  // RemoveLiquidity removes liquidity from the pool, from the lptoken send in
  rpc RemoveLiquidity (MsgRemoveLiquidity) returns (MsgRemoveLiquidityResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                      "authority";
  option           (amino.name) = "zigchain/x/dex/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreatePool creates pool message needs base and token
message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator = 1;
  cosmos.base.v1beta1.Coin base    = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin quote   = 3 [(gogoproto.nullable) = false];
  string                   receiver  = 4;
}

// MsgCreatePoolResponse defines the response structure for executing MsgCreatePool message.
message MsgCreatePoolResponse {
  string poolId = 1;
  cosmos.base.v1beta1.Coin  base   = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin  quote  = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin  lpToken = 4 [(gogoproto.nullable) = false];
}

// MsgSwap swaps tokens from one to another
message MsgSwap {
  option (cosmos.msg.v1.signer) = "signer";
  string                   signer = 1;
  cosmos.base.v1beta1.Coin incoming    = 2 [(gogoproto.nullable) = false];
  string                   poolId   = 3;
  string                   receiver = 4;
}

// MsgSwapResponse defines the response structure for executing MsgSwap message.
message MsgSwapResponse {
  cosmos.base.v1beta1.Coin swapped = 1 [(gogoproto.nullable) = false];
  string                   base    = 2;
  string                   quote   = 3;
}

// MsgAddLiquidity adds liquidity to the pool, from the base and quote tokens send in
message MsgAddLiquidity {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator = 1;
  string                   poolId  = 2;
  cosmos.base.v1beta1.Coin base    = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin quote   = 4 [(gogoproto.nullable) = false];
  string                   receiver = 5;
}

// MsgAddLiquidityResponse defines the response structure for executing MsgAddLiquidity message.
message MsgAddLiquidityResponse {
  cosmos.base.v1beta1.Coin lptoken = 1 [(gogoproto.nullable) = false];
}

// MsgRemoveLiquidity removes liquidity from the pool, from the lptoken send in
message MsgRemoveLiquidity {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator = 1;
  cosmos.base.v1beta1.Coin lptoken = 2 [(gogoproto.nullable) = false];
  string                   receiver  = 3;
}

// MsgRemoveLiquidityResponse defines the response structure for executing MsgRemoveLiquidity message.
message MsgRemoveLiquidityResponse {
  cosmos.base.v1beta1.Coin base  = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin quote = 2 [(gogoproto.nullable) = false];
}

